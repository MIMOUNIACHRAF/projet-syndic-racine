// <auto-generated />
using System;
using Application_PFA_SYNDIC.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Application_PFA_SYNDIC.Migrations
{
    [DbContext(typeof(Mycontext))]
    [Migration("20230401224416_addCategorieandDepences")]
    partial class addCategorieandDepences
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("civilité")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("amins");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.Avis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("LotId")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LotId");

                    b.ToTable("avis");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.CategorieDepenses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("coproprieteId")
                        .HasColumnType("int");

                    b.Property<string>("rubrique")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("coproprieteId");

                    b.ToTable("categorieDepenses");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.Copropriete", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("budgetAnnuel")
                        .HasColumnType("real");

                    b.Property<string>("codePostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateDebutExercise")
                        .HasColumnType("datetime2");

                    b.Property<int>("nbrLots")
                        .HasColumnType("int");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ville")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("coproprietes");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.Depense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("budget")
                        .HasColumnType("real");

                    b.Property<int>("categorieDepensesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateDepense")
                        .HasColumnType("datetime2");

                    b.Property<string>("libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("categorieDepensesId");

                    b.ToTable("depenses");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.ImageEtatLieu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("etatDeLieuId")
                        .HasColumnType("int");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("etatDeLieuId");

                    b.ToTable("ImageEtatLieu");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.ImageLots", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("LotId")
                        .HasColumnType("int");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LotId");

                    b.ToTable("imageLots");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.Lot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CoproprieteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateAquisition")
                        .HasColumnType("datetime2");

                    b.Property<string>("desciption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("disponibilte")
                        .HasColumnType("bit");

                    b.Property<string>("etage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mumero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("prixLocation")
                        .HasColumnType("real");

                    b.Property<float>("prixVente")
                        .HasColumnType("real");

                    b.Property<int>("superficie")
                        .HasColumnType("int");

                    b.Property<int>("typeLotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoproprieteId");

                    b.HasIndex("typeLotId");

                    b.ToTable("lots");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.Louer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Montant")
                        .HasColumnType("real");

                    b.Property<DateTime>("dateDebut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dateFin")
                        .HasColumnType("datetime2");

                    b.Property<int>("lotId")
                        .HasColumnType("int");

                    b.Property<int>("propritaireId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("lotId");

                    b.HasIndex("propritaireId");

                    b.ToTable("louers");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.Propritaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("civilité")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contactPerssoneCasUrgence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nomPerssoneCasUrgence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("prenomPerssoneCasUrgence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("propritaires");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.RdvViste", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("dateRdv")
                        .HasColumnType("datetime2");

                    b.Property<int>("lotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("lotId");

                    b.ToTable("rdvVistes");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.Syndic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("civilité")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("syndics");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.Ticket", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.HasKey("id");

                    b.ToTable("tickets");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.TypeLot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("typeLots");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.etatDeLieu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("louerId")
                        .HasColumnType("int");

                    b.Property<int>("nbrElement")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("louerId")
                        .IsUnique();

                    b.ToTable("etatDeLieus");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.paiement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("LouerId")
                        .HasColumnType("int");

                    b.Property<string>("commentaire")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateDencaisement")
                        .HasColumnType("datetime2");

                    b.Property<string>("justificative")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("montantEncaiser")
                        .HasColumnType("real");

                    b.Property<int>("numerotrasaction")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LouerId");

                    b.ToTable("paiements");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.reunion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CoproprieteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateReunion")
                        .HasColumnType("datetime2");

                    b.Property<string>("emplacement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("propritaireId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoproprieteId");

                    b.HasIndex("propritaireId");

                    b.ToTable("reunions");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.Avis", b =>
                {
                    b.HasOne("Application_PFA_SYNDIC.Models.Lot", null)
                        .WithMany("avis")
                        .HasForeignKey("LotId");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.CategorieDepenses", b =>
                {
                    b.HasOne("Application_PFA_SYNDIC.Models.Copropriete", "copropriete")
                        .WithMany("categorieDepenses")
                        .HasForeignKey("coproprieteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("copropriete");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.Depense", b =>
                {
                    b.HasOne("Application_PFA_SYNDIC.Models.CategorieDepenses", "categorieDepenses")
                        .WithMany("depenses")
                        .HasForeignKey("categorieDepensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("categorieDepenses");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.ImageEtatLieu", b =>
                {
                    b.HasOne("Application_PFA_SYNDIC.Models.etatDeLieu", null)
                        .WithMany("imageEtatLieus")
                        .HasForeignKey("etatDeLieuId");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.ImageLots", b =>
                {
                    b.HasOne("Application_PFA_SYNDIC.Models.Lot", null)
                        .WithMany("imageLots")
                        .HasForeignKey("LotId");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.Lot", b =>
                {
                    b.HasOne("Application_PFA_SYNDIC.Models.Copropriete", null)
                        .WithMany("lots")
                        .HasForeignKey("CoproprieteId");

                    b.HasOne("Application_PFA_SYNDIC.Models.TypeLot", "typeLot")
                        .WithMany("Lots")
                        .HasForeignKey("typeLotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("typeLot");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.Louer", b =>
                {
                    b.HasOne("Application_PFA_SYNDIC.Models.Lot", "lot")
                        .WithMany("louers")
                        .HasForeignKey("lotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application_PFA_SYNDIC.Models.Propritaire", "propritaire")
                        .WithMany()
                        .HasForeignKey("propritaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("lot");

                    b.Navigation("propritaire");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.RdvViste", b =>
                {
                    b.HasOne("Application_PFA_SYNDIC.Models.Lot", "lot")
                        .WithMany("rdvvistes")
                        .HasForeignKey("lotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("lot");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.etatDeLieu", b =>
                {
                    b.HasOne("Application_PFA_SYNDIC.Models.Louer", "louer")
                        .WithOne("etatDeLieu")
                        .HasForeignKey("Application_PFA_SYNDIC.Models.etatDeLieu", "louerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("louer");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.paiement", b =>
                {
                    b.HasOne("Application_PFA_SYNDIC.Models.Louer", null)
                        .WithMany("paiements")
                        .HasForeignKey("LouerId");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.reunion", b =>
                {
                    b.HasOne("Application_PFA_SYNDIC.Models.Copropriete", "Copropriete")
                        .WithMany("reunions")
                        .HasForeignKey("CoproprieteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application_PFA_SYNDIC.Models.Propritaire", "propritaire")
                        .WithMany("reunions")
                        .HasForeignKey("propritaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Copropriete");

                    b.Navigation("propritaire");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.CategorieDepenses", b =>
                {
                    b.Navigation("depenses");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.Copropriete", b =>
                {
                    b.Navigation("categorieDepenses");

                    b.Navigation("lots");

                    b.Navigation("reunions");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.Lot", b =>
                {
                    b.Navigation("avis");

                    b.Navigation("imageLots");

                    b.Navigation("louers");

                    b.Navigation("rdvvistes");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.Louer", b =>
                {
                    b.Navigation("etatDeLieu")
                        .IsRequired();

                    b.Navigation("paiements");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.Propritaire", b =>
                {
                    b.Navigation("reunions");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.TypeLot", b =>
                {
                    b.Navigation("Lots");
                });

            modelBuilder.Entity("Application_PFA_SYNDIC.Models.etatDeLieu", b =>
                {
                    b.Navigation("imageEtatLieus");
                });
#pragma warning restore 612, 618
        }
    }
}
